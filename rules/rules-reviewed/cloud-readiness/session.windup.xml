<?xml version="1.0"?>
<ruleset id="session"
    xmlns="http://windup.jboss.org/schema/jboss-ruleset"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://windup.jboss.org/schema/jboss-ruleset http://windup.jboss.org/schema/jboss-ruleset/windup-jboss-ruleset.xsd">
    <metadata>
        <description>
            This ruleset detects data storage in HTTP session objects, which may be problematic when migrating an application to a cloud environment.
        </description>
        <dependencies>
          <addon id="org.jboss.windup.rules,windup-rules-javaee,3.0.0.Final"/>
          <addon id="org.jboss.windup.rules,windup-rules-java,3.0.0.Final"/>
        </dependencies>
        <sourceTechnology id="java"/>
        <sourceTechnology id="java-ee"/>
        <targetTechnology id="cloud-readiness"/>
        <tag>clustering</tag>
    </metadata>
    <rules>
        <rule id="session-00000">
            <when>
              <xmlfile matches="/w:web-app/w:distributable">
                  <namespace prefix="w" uri="http://java.sun.com/xml/ns/javaee"/>
              </xmlfile>
            </when>
            <perform>
                <hint title="HTTP session replication (distributable web.xml)" effort="3" category-id="cloud-mandatory">
                    <message>
                    Session replication ensures that client sessions are not disrupted by node failure. Each node in the cluster shares information about ongoing sessions and can take over sessions if another node disappears. In a cloud environment, however, data in the memory of a running container can be wiped out by a restart.

                    Recommendations

                    * Review the session replication usage and ensure that it is configured properly.
                    * Disable HTTP session clustering and accept its implications.
                    * Re-architect the application so that sessions are stored in a cache backing service or a remote data grid.

                    A remote data grid has the following benefits:

                    * The application is more scaleable and elastic.
                    * The application can survive EAP node failures because a JVM failure does not cause session data loss.
                    * Session data can be shared by multiple applications.
                    </message>
                    <link href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.3/html/development_guide/clustering_in_web_applications" title="JBoss EAP: Clustering in Web Applications"/>
                    <link href="https://12factor.net/processes" title="Twelve-Factor App: Processes"/>
                    <link href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.3/html-single/getting_started_with_jboss_eap_for_openshift_container_platform/index#reference_clustering" title="Getting Started with JBoss EAP for OpenShift Container Platform: Clustering"/>
                    <link href="https://12factor.net/backing-services" title="Twelve-Factor App: Backing services"/>
                    <link href="https://access.redhat.com/documentation/en-us/red_hat_data_grid/8.0/html-single/running_data_grid_on_openshift/index" title="Running Data Grid on OpenShift"/>
                    <link href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.3/html-single/configuration_guide/index#jdg_externalize_http_sessions" title="JBoss EAP:  Externalize HTTP Sessions to Red Hat Data Grid"/>
                    <tag>clustering</tag>
                </hint>
            </perform>
        </rule>

        <rule id="session-00001">
            <when>
               <or>
                <javaclass references="javax.servlet.http.HttpSession.setAttribute({*})"/>
                <javaclass references="javax.servlet.http.HttpSession.putValue({*})"/>
                </or>
            </when>
            <perform>
                <hint title="HTTP Session data storage" effort="5" category-id="potential">
                    <message>
                        When migrating an application that stores data in an HTTP Session to Azure, it's important to consider that the HTTP Session is not a suitable mechanism for maintaining state in a cloud environment due to scaling in and out as load changes.
                        Instead, you can leverage Azure Cache for Redis to achieve session management in a cloud-native way.

                        * Provide **Azure Cache for Redis**: Azure Cache for Redis is a fully managed, highly scalable, and distributed caching service. It allows you to store and manage session data in-memory, providing fast and efficient access.

                        * **Configure** Azure Cache for Redis: Configure the cache settings, such as cache size, eviction policies, and access control.

                        * **Update session management**: Modify your application's session management code to use Azure Cache for Redis. Replace the usage of HTTP Session objects with the appropriate Redis-based session management implementation.

                        * **Store and retrieve session data**: Use the Azure Cache for Redis client libraries or connectors within your application to store and retrieve session data. This ensures that session state is securely managed and accessible across multiple instances of your application.

                        * **Test and validate**: Test your application to ensure that session state is maintained correctly using Azure Cache for Redis. Verify that session data is stored and retrieved accurately across multiple instances of your application.
                    </message>
                    <link title="Azure Cache for Redis Documentation" href="https://learn.microsoft.com/azure/azure-cache-for-redis"/>
                    <link title="Quickstart: Use Azure Cache for Redis in Java" href="https://learn.microsoft.com/azure/azure-cache-for-redis/cache-java-get-started"/>
                    <tag>clustering</tag>
                </hint>
            </perform>
        </rule>
    </rules>
</ruleset>
