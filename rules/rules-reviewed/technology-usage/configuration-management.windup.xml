<?xml version="1.0"?>
<ruleset xmlns="http://windup.jboss.org/schema/jboss-ruleset" id="configuration-management" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://windup.jboss.org/schema/jboss-ruleset http://windup.jboss.org/schema/jboss-ruleset/windup-jboss-ruleset.xsd">
    <metadata>
        <description>
            This ruleset generates tags for configuration-management related technologies 
        </description>
        <dependencies>
            <addon id="org.jboss.windup.rules,windup-rules-javaee,3.0.0.Final"/>
            <addon id="org.jboss.windup.rules,windup-rules-java,3.0.0.Final"/>
            <addon id="org.jboss.windup.rules,windup-rules-xml,3.0.0.Final"/>
        </dependencies>
    </metadata>
    <rules>
        <rule id="configuration-management-0100">
            <when>
                <or>
                    <project>
                        <artifact groupId="org.springframework.cloud" artifactId="spring-cloud-config-client" />
                    </project>
                    <project>
                        <artifact groupId="org.springframework.cloud"  artifactId="spring-cloud-starter-config" />
                    </project>
                    <dependency groupId="org.springframework.cloud" artifactId="spring-cloud-config-client" />
                </or>
            </when>
            <perform>
                <classification title="Embedded library - Spring Cloud Config" category-id="information" effort="0">
                    <description>
                        The application embeds Spring Cloud Config.

                        If you are migrating to Azure Spring Apps, the connection info of Config Server will be injected automatically upon app start.
                        Find any explicit configurations of config server connection info:

                        If configured in **configuration files**: they will be ignored and overrided by Azure Spring Apps.

                        If configured in **command line parameters**, **Java system attribute**, **environment variable**: they need to be removed or you might experience conflicts and unexpected behavior.

                        Configure the config server after creating an Azure Spring Apps instance.
                    </description>
                    <link title="Prepare the Spring Cloud Config server" href="https://learn.microsoft.com/azure/developer/java/migration/migrate-spring-cloud-to-azure-spring-apps?pivots=sc-standard-tier#prepare-the-spring-cloud-config-server"/>
                </classification>
                <technology-tag level="INFORMATIONAL">Spring Cloud Config</technology-tag>
            </perform>
        </rule>
        <rule id="configuration-management-0200">
            <when>
                <file filename="application{profile}.{extension}"   />
            </when>
            <perform>
                <classification title="Application properties file detected" category-id="information" effort="0">
                    <description>Application properties file detected</description>
                </classification>
                <technology-tag level="INFORMATIONAL">Application Properties File</technology-tag>
            </perform>
            <where param="profile">
                <matches pattern=".*" />
            </where>
            <where param="extension">
                <matches pattern="(properties|yml|yaml)" />
            </where>
        </rule>
        <rule id="configuration-management-0300">
            <when>
                <filecontent filename="application{profile}.{extension}" pattern="spring.datasource" />
            </when>
            <perform>
                <classification title="Spring datasource properties detected" category-id="information" effort="0">
                    <description>Spring datasource properties detected</description>
                </classification>
                <technology-tag level="INFORMATIONAL">Spring Properties</technology-tag>
            </perform>
            <where param="profile">
                <matches pattern=".*" />
            </where>
            <where param="extension">
                <matches pattern="(properties|yml|yaml)" />
            </where>
        </rule>
        <rule id="configuration-management-0400">
            <when>
                <filecontent filename="application{profile}.{extension}" pattern="logging.level.org.springframework" />
            </when>
            <perform>
                <classification title="Spring logging properties detected" category-id="information" effort="0">
                    <description>Spring logging properties detected</description>
                </classification>
                <technology-tag level="INFORMATIONAL">Spring Properties</technology-tag>
            </perform>
            <where param="profile">
                <matches pattern=".*" />
            </where>
            <where param="extension">
                <matches pattern="(properties|yml|yaml)" />
            </where>
        </rule>
        <rule id="configuration-management-0500">
            <when>
                <javaclass references="org.springframework.boot.context.properties.ConfigurationProperties"  >
                    <location>ANNOTATION</location>
                </javaclass>
            </when>
            <perform>
                <classification title="Spring configuration properties annotation detected" category-id="information" effort="0">
                    <description>Spring configuration properties annotation detected</description>
                </classification>
                <technology-tag level="INFORMATIONAL">Spring Properties</technology-tag>
            </perform>
        </rule>
        <rule id="configuration-management-0600">
            <when>
                <or>
                    <file filename="{*}spring-cloud-vault{*}.jar"/>
                    <project>
                        <artifact groupId="org.springframework.cloud" artifactId="spring-cloud-starter-vault-config" />
                    </project>
                    <project>
                        <artifact groupId="org.springframework.cloud" artifactId="spring-cloud-vault-config" />
                    </project>
                    <dependency groupId="org.springframework.cloud" artifactId="spring-cloud-vault-config" />
                    <filecontent filename="{*}.{extensions}" pattern="spring.cloud.vault"/>
                </or>
            </when>
            <perform>
                <hint title="Embedded library - Spring Cloud Vault" category-id="information" effort="0">
                    <message>
                        The application embeds Spring Cloud Vault.
                        To migrate a Java application that uses Spring Cloud Vault to store and access secrets to Azure, you can follow this recommendation:

                        * Identify the backing secret store (for example, HashiCorp Vault or CredHub).

                        * Identify all the secrets used by the application code.

                        * Migrate Spring Cloud Vault secrets to Azure KeyVault. You can inject secrets directly into applications through Spring by using the Azure KeyVault Spring Boot Starter.

                        * Note that Migration may require you to rename some secrets. Update your application code accordingly.
                    </message>
                    <link title="Load a secret from Azure Key Vault in a Spring Boot application" href="https://learn.microsoft.com/azure/developer/java/spring-framework/configure-spring-boot-starter-java-app-with-azure-key-vault"/>
                    <link title="Azure Key Vault" href="https://learn.microsoft.com/azure/key-vault/general/overview"/>
                </hint>
                <technology-tag level="INFORMATIONAL">Spring Cloud Vault</technology-tag>
            </perform>
        </rule>
    </rules>
</ruleset>