<?xml version="1.0" encoding="UTF-8"?>
<ruleset id="local-storage"
         xmlns="http://windup.jboss.org/schema/jboss-ruleset"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://windup.jboss.org/schema/jboss-ruleset http://windup.jboss.org/schema/jboss-ruleset/windup-jboss-ruleset.xsd">
    <metadata>
        <description>
            This ruleset detects local storage usage, which is problematic when migrating an application to a cloud environment.
            This ruleset overrides the rules/rules-reviewed/cloud-readiness/local-storage.windup.xml ruleset.
        </description>
        <dependencies>
            <addon id="org.jboss.windup.rules,windup-rules-javaee,3.0.0.Final"/>
            <addon id="org.jboss.windup.rules,windup-rules-java,3.0.0.Final"/>
        </dependencies>
        <targetTechnology id="azure-spring-apps"/>
        <targetTechnology id="azure-appservice"/>
        <targetTechnology id="azure-aks"/>
        <targetTechnology id="azure-container-apps"/>
        <tag>storage</tag>
        <overrideRules>true</overrideRules>
    </metadata>
    <!--
      This rules could be merged together but they need to be separated due to issue WINDUP-1324 [https://issues.jboss.org/projects/WINDUP/issues/WINDUP-1324]
      This is also the reason why many messages are pretty similar.
    -->
    <rules>
        <rule id="local-storage-00001">
            <when>
                <or>
                    <javaclass references="java.io.{ioclass}{*}">
                        <location>CONSTRUCTOR_CALL</location>
                    </javaclass>
                    <javaclass references="java.util.zip.ZipFile{*}">
                        <location>CONSTRUCTOR_CALL</location>
                    </javaclass>
                    <javaclass references="java.io.File.createTempFile({*})">
                        <location>METHOD_CALL</location>
                    </javaclass>
                    <javaclass references="java.nio.file.Paths.get({*})">
                        <location>METHOD_CALL</location>
                    </javaclass>
                </or>
            </when>
            <perform>
                <hint title="File system - Java IO" effort="3" category-id="cloud-mandatory">
                    <message>
                        When migrating an application that relies on the file system to Azure, it's important to consider the limitations of local storage in a cloud environment.
                        An application running inside a container could lose access to a file in local storage.

                        The following recommendations depend on the function of the file in local storage:

                        * **Reading/writing files**: Use Azure Storage services for object, block, and file storage to meet your data's highest demands.

                        * **Logging**: Log to standard output and use Azure Monitor to collect and analyze the logs.

                        * **Caching**: Use Azure Cache for Redis as a cache backing service.

                        * **Configuration**: Store configuration in Azure App Configuration instead of using the file system. Also store configuration settings in environment variables so that they can be updated without code changes.
                    </message>
                    <link title="Azure Storage" href="https://azure.microsoft.com/products/category/storage"/>
                    <link title="Azure Storage documentation" href="https://learn.microsoft.com/azure/storage/"/>
                    <link title="Azure Monitor" href="https://azure.microsoft.com/products/monitor/"/>
                    <link title="Azure Monitor documentation" href="https://learn.microsoft.com/azure/azure-monitor/"/>
                    <link title="Azure Cache for Redis" href="https://azure.microsoft.com/products/cache"/>
                    <link title="Azure Cache for Redis documentation" href="https://learn.microsoft.com/azure/azure-cache-for-redis/"/>
                    <link title="Azure App Configuration" href="https://azure.microsoft.com/products/app-configuration"/>
                    <link title="Azure App Configuration documentation" href="https://learn.microsoft.com/azure/azure-app-configuration/"/>
                    <tag>storage</tag>
                </hint>
            </perform>
            <where param="ioclass">
                <matches pattern="(FileWriter|FileReader|PrintStream|File|PrintWriter|RandomAccessFile)"/>
            </where>
        </rule>
        <rule id="local-storage-00002">
            <when>
                <javaclass references="java.net.{class}({*})" matchesSource="{*}file{*}">
                    <location>CONSTRUCTOR_CALL</location>
                </javaclass>
            </when>
            <perform>
                <hint title="File system - java.net.URL/URI" effort="3" category-id="cloud-mandatory">
                    <message>
                        When migrating an application that relies on the file system to Azure, it's important to consider the limitations of local storage in a cloud environment.
                        An application running inside a container could lose access to a file in local storage.

                        The following recommendations depend on the function of the file in local storage:

                        * **Reading/writing files**: Use Azure Storage services for object, block, and file storage to meet your data's highest demands.

                        * **Logging**: Log to standard output and use Azure Monitor to collect and analyze the logs.

                        * **Caching**: Use Azure Cache for Redis as a cache backing service.

                        * **Configuration**: Store configuration in Azure App Configuration instead of using the file system. Also store configuration settings in environment variables so that they can be updated without code changes.
                    </message>
                    <link title="Azure Storage" href="https://azure.microsoft.com/products/category/storage"/>
                    <link title="Azure Storage documentation" href="https://learn.microsoft.com/azure/storage/"/>
                    <link title="Azure Monitor" href="https://azure.microsoft.com/products/monitor/"/>
                    <link title="Azure Monitor documentation" href="https://learn.microsoft.com/azure/azure-monitor/"/>
                    <link title="Azure Cache for Redis" href="https://azure.microsoft.com/products/cache"/>
                    <link title="Azure Cache for Redis documentation" href="https://learn.microsoft.com/azure/azure-cache-for-redis/"/>
                    <link title="Azure App Configuration" href="https://azure.microsoft.com/products/app-configuration"/>
                    <link title="Azure App Configuration documentation" href="https://learn.microsoft.com/azure/azure-app-configuration/"/>
                    <tag>storage</tag>
                </hint>
            </perform>
            <where param="class">
                <matches pattern="(URL|URI)"/>
            </where>
        </rule>
        <rule id="local-storage-00003">
            <when>
                <filecontent pattern="{path1}" filename="{*}{extensions}"/>
            </when>
            <perform>
                <hint title="File system - File path URL" effort="3" category-id="cloud-mandatory">
                    <message>
                        When migrating an application that relies on the file system to Azure, it's important to consider the limitations of local storage in a cloud environment.
                        An application running inside a container could lose access to a file in local storage.

                        The following recommendations depend on the function of the file in local storage:

                        * **Reading/writing files**: Use Azure Storage services for object, block, and file storage to meet your data's highest demands.

                        * **Logging**: Log to standard output and use Azure Monitor to collect and analyze the logs.

                        * **Caching**: Use Azure Cache for Redis as a cache backing service.

                        * **Configuration**: Store configuration in Azure App Configuration instead of using the file system. Also store configuration settings in environment variables so that they can be updated without code changes.
                    </message>
                    <link title="Azure Storage" href="https://azure.microsoft.com/products/category/storage"/>
                    <link title="Azure Storage documentation" href="https://learn.microsoft.com/azure/storage/"/>
                    <link title="Azure Monitor" href="https://azure.microsoft.com/products/monitor/"/>
                    <link title="Azure Monitor documentation" href="https://learn.microsoft.com/azure/azure-monitor/"/>
                    <link title="Azure Cache for Redis" href="https://azure.microsoft.com/products/cache"/>
                    <link title="Azure Cache for Redis documentation" href="https://learn.microsoft.com/azure/azure-cache-for-redis/"/>
                    <link title="Azure App Configuration" href="https://azure.microsoft.com/products/app-configuration"/>
                    <link title="Azure App Configuration documentation" href="https://learn.microsoft.com/azure/azure-app-configuration/"/>
                    <tag>storage</tag>
                </hint>
            </perform>
            <where param="path1">
                <!-- absolute paths on windows -->
                <!-- UPDATE TO REMOVE PATTERNS STARTING WITH java: AND classpath: -->
                <matches pattern="(([:=(,\{])([ ])*([&quot;'])?([a-zA-Z]):)(?&lt;![\&lt;\\\/\d\w])([\\\/]\w+)+(\.\w+)?"/>
            </where>
            <where param="extensions">
                <matches pattern="(\.java|\.properties|\.jsp|\.jspf|\.tag|[^pom]\.xml|\.txt)"/>
            </where>
        </rule>
        <rule id="local-storage-00004">
            <when>
                <filecontent pattern="{path2}" filename="{*}.{extensions}"/>
            </when>
            <perform>
                <hint title="File system - 'file://' scheme" effort="3" category-id="cloud-mandatory">
                    <message>
                        When migrating an application that relies on the file system to Azure, it's important to consider the limitations of local storage in a cloud environment.
                        An application running inside a container could lose access to a file in local storage.

                        The following recommendations depend on the function of the file in local storage:

                        * **Reading/writing files**: Use Azure Storage services for object, block, and file storage to meet your data's highest demands.

                        * **Logging**: Log to standard output and use Azure Monitor to collect and analyze the logs.

                        * **Caching**: Use Azure Cache for Redis as a cache backing service.

                        * **Configuration**: Store configuration in Azure App Configuration instead of using the file system. Also store configuration settings in environment variables so that they can be updated without code changes.
                    </message>
                    <link title="Azure Storage" href="https://azure.microsoft.com/products/category/storage"/>
                    <link title="Azure Storage documentation" href="https://learn.microsoft.com/azure/storage/"/>
                    <link title="Azure Monitor" href="https://azure.microsoft.com/products/monitor/"/>
                    <link title="Azure Monitor documentation" href="https://learn.microsoft.com/azure/azure-monitor/"/>
                    <link title="Azure Cache for Redis" href="https://azure.microsoft.com/products/cache"/>
                    <link title="Azure Cache for Redis documentation" href="https://learn.microsoft.com/azure/azure-cache-for-redis/"/>
                    <link title="Azure App Configuration" href="https://azure.microsoft.com/products/app-configuration"/>
                    <link title="Azure App Configuration documentation" href="https://learn.microsoft.com/azure/azure-app-configuration/"/>
                    <tag>storage</tag>
                </hint>
            </perform>
            <where param="path2">
                <!-- URL with local path -->
                <matches pattern="file://"/>
            </where>
            <where param="extensions">
                <matches pattern="(\\.java|\\.properties|\\.jsp|\\.jspf|\\.tag|[^pom]\\.xml|\\.txt)"/>
            </where>
        </rule>
        <rule id="local-storage-00005">
            <when>
                <or>
                    <javaclass references="java.nio.channels.AsynchronousFileChannel{*}">
                        <location>IMPORT</location>
                    </javaclass>
                    <javaclass references="java.nio.channels.FileChannel{*}">
                        <location>IMPORT</location>
                    </javaclass>
                    <javaclass references="java.nio.channels.FileLock{*}">
                        <location>IMPORT</location>
                    </javaclass>
                    <javaclass references="java.nio.file.{*}">
                        <location>IMPORT</location>
                    </javaclass>
                </or>
            </when>
            <perform>
                <iteration>
                    <hint title="File system - Java NIO" effort="3" category-id="cloud-mandatory">
                        <message>
                            When migrating an application that relies on the file system to Azure, it's important to consider the limitations of local storage in a cloud environment.
                            An application running inside a container could lose access to a file in local storage.

                            The following recommendations depend on the function of the file in local storage:

                            * **Reading/writing files**: Use Azure Storage services for object, block, and file storage to meet your data's highest demands.

                            * **Logging**: Log to standard output and use Azure Monitor to collect and analyze the logs.

                            * **Caching**: Use Azure Cache for Redis as a cache backing service.

                            * **Configuration**: Store configuration in Azure App Configuration instead of using the file system. Also store configuration settings in environment variables so that they can be updated without code changes.
                        </message>
                        <link title="Azure Storage" href="https://azure.microsoft.com/products/category/storage"/>
                        <link title="Azure Storage documentation" href="https://learn.microsoft.com/azure/storage/"/>
                        <link title="Azure Monitor" href="https://azure.microsoft.com/products/monitor/"/>
                        <link title="Azure Monitor documentation" href="https://learn.microsoft.com/azure/azure-monitor/"/>
                        <link title="Azure Cache for Redis" href="https://azure.microsoft.com/products/cache"/>
                        <link title="Azure Cache for Redis documentation" href="https://learn.microsoft.com/azure/azure-cache-for-redis/"/>
                        <link title="Azure App Configuration" href="https://azure.microsoft.com/products/app-configuration"/>
                        <link title="Azure App Configuration documentation" href="https://learn.microsoft.com/azure/azure-app-configuration/"/>
                        <tag>storage</tag>
                    </hint>
                </iteration>
            </perform>
        </rule>
    </rules>
</ruleset>
