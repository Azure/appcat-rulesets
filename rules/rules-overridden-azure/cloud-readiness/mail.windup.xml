<?xml version="1.0"?>
<ruleset id="mail"
         xmlns="http://windup.jboss.org/schema/jboss-ruleset"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://windup.jboss.org/schema/jboss-ruleset http://windup.jboss.org/schema/jboss-ruleset/windup-jboss-ruleset.xsd">
    <metadata>
        <description>
            This ruleset detects the Java Mail API, which may be problematic when migrating an application to a cloud environment.
            It overrids rules/rules-reviewed/cloud-readiness/mail.windup.xml
        </description>
        <dependencies>
            <addon id="org.jboss.windup.rules,windup-rules-javaee,3.0.0.Final"/>
            <addon id="org.jboss.windup.rules,windup-rules-java,3.0.0.Final"/>
        </dependencies>
        <targetTechnology id="azure-spring-apps"/>
        <targetTechnology id="azure-appservice"/>
        <targetTechnology id="azure-aks"/>
        <targetTechnology id="azure-container-apps"/>
        <tag>mail</tag>
        <overrideRules>true</overrideRules>
    </metadata>
    <rules>
        <rule id="mail-00000">
            <when>
                <or>
                    <javaclass references="javax.mail.{*}"/>
                    <javaclass references="com.sun.mail.{*}"/>
                    <javaclass references="org.simplejavamail.{*}"/>
                    <javaclass references="org.apache.commons.mail.{*}"/>
                </or>
            </when>
            <perform>
                <hint title="Java Mail API" effort="3" category-id="potential">
                    <message>
                        The application uses email APIs to send or receive emails.
                        In a cloud environment, mail systems should be considered backing services and treated like attached resources.
                        You can either use SMTP directly, or use Azure Communication Services Email and migrate the email functionality of your application to Azure.

                        * Using **Azure Communication Services**: Create an Azure Communication Services resource in your Azure subscription. This will provide you with the necessary capabilities to send emails. pdate your application's email sending code to use the Azure Communication Services Email SDK or REST API. This involves integrating the Azure Communication Services Email client libraries into your application and configuring the required settings, such as the sender's email address, recipient addresses, subject, and email content.

                        * Using **SMTP directly**: You can also use your own SMTP provider. In this case, check if port 25 is open in the App Service SKU.
                    </message>
                    <link title="Azure Communication Services" href="https://azure.microsoft.com/products/communication-services/"/>
                    <link title="Azure Communication Services documentation" href="https://learn.microsoft.com/azure/communication-services/"/>
                    <link title="Quickstart: How to send an email using Azure Communication Service" href="https://learn.microsoft.com/azure/communication-services/quickstarts/email/send-email"/>
                    <link title="Troubleshoot outbound SMTP connectivity problems in Azure" href="https://learn.microsoft.com/azure/virtual-network/troubleshoot-outbound-smtp-connectivity" />
                    <tag>mail</tag>
                </hint>
            </perform>
        </rule>
    </rules>
</ruleset>
